using NUnit.Framework;
using Automation_Test;

namespace Automation_Test;

[TestFixture]

public class TestsDivide
{
    int randomInt;
    int randomInt2;
    Calculator calculator;

    [OneTimeSetUp]
    public void SetupForClass()
    {
        calculator = new Calculator();
        randomInt = new Random().Next(10, 399);
        randomInt2 = new Random().Next(-99, 700);
    }

    [Test, Description("Check divide when operand_1 and operand_2 is generated by Random")]
    [Category("Random")]
    public void TestDivide_random()
    {
        //Action
        var actualResult = calculator.Divide(randomInt, randomInt2);
        var expectedResult = randomInt / randomInt2;

        Console.WriteLine($"Number 1: {randomInt}, Number 2: {randomInt2}");

        ////Assert
        Assert.That(actualResult, Is.EqualTo(expectedResult), $"Divide {randomInt} / {randomInt2} = {actualResult}");
    }

    [TestCase(-12, -6, 2), Description("Test Case: divide 2 negative values")]
    [TestCase(-400, -100, 4)]
    [TestCase(-190, -5, 38)]
    public void TestDivide_way1_negativeNumbers(int operand1, int operand2, int result)
    {
        //Action
        var actualResult = calculator.Divide(operand1, operand2);

        ////Assert
        Assert.That(actualResult, Is.EqualTo(result), $"Divide {operand1} / {operand2} = {actualResult}");
    }

    [TestCase(20, 1, ExpectedResult = 20), Description("Test Case: divide 2 positive values")]
    [TestCase(306, 18, ExpectedResult = 17)]
    [TestCase(15000, 50, ExpectedResult = 300)]
    public int TestDivide_way2_positiveNumbers(int operand1, int operand2)
    {
        //Action
        var actualResult = calculator.Divide(operand1, operand2);

        return actualResult;
    }

    [Retry(3)]
    [Test, Description("Test divide - when operand_1 is in values, operand_2 is in the range")]
    [Category("Mix")]
    public void TestDivide_way3_mix(
        [Values(200, 800, 1400)] int operand1,
        [Range(-150, 500, 100)] int operand2)
    {
        //Action
        var actualResult = calculator.Divide(operand1, operand2);
        var expectedResult = operand1 / operand2;

        //Assert
        Assert.AreEqual(actualResult, expectedResult, $"Divide {operand1} / {operand2} = {actualResult}");
    }

    [TearDown]
    public void TearDown()
    {
        Console.WriteLine("Divide - After each test");
    }

    [OneTimeTearDown]
    public void OneTimeTearDown()
    {
        Console.WriteLine("Divide - In the end after all tests");
    }
}
