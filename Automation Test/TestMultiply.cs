using NUnit.Framework;
using Automation_Test;

namespace Automation_Test;

[TestFixture]

public class TestsMultiply
{
    int randomInt;
    int randomInt2;
    Calculator calculator;

    [OneTimeSetUp]
    public void SetupForClass()
    {
        calculator = new Calculator();
        randomInt = new Random().Next(10, 399);
        randomInt2 = new Random().Next(-99, 700);
    }

    [Test, Description("Check multiply when operand_1 and operand_2 is generated by Random")]
    [Category("Random")]
    public void TestMultiply_random()
    {
        //Action
        var actualResult = calculator.Multiply(randomInt, randomInt2);
        var expectedResult = randomInt * randomInt2;

        Console.WriteLine($"Number 1: {randomInt}, Number 2: {randomInt2}");

        ////Assert
        Assert.That(actualResult, Is.EqualTo(expectedResult), $"Multiply {randomInt} * {randomInt2} = {actualResult}");
    }

    [TestCase(-12, -6, 72), Description("Test Case: multiply 2 negative values")]
    [TestCase(-400, -100, 40000)]
    [TestCase(-190, -5, 950)]
    public void TestMultiply_way1_negativeNumbers(int operand1, int operand2, int result)
    {
        //Action
        var actualResult = calculator.Multiply(operand1, operand2);

        ////Assert
        Assert.That(actualResult, Is.EqualTo(result), $"Multiply {operand1} * {operand2} = {actualResult}");
    }

    [TestCase(20, 1, ExpectedResult = 20), Description("Test Case: multiply 2 positive values")]
    [TestCase(306, 18, ExpectedResult = 5508)]
    [TestCase(15000, 50, ExpectedResult = 750000)]
    public int TestMultiply_way2_positiveNumbers(int operand1, int operand2)
    {
        //Action
        var actualResult = calculator.Multiply(operand1, operand2);

        return actualResult;
    }

    [Retry(2)]
    [Test, Description("Test multiply - when operand_1 is in values, operand_2 is in the range")]
    [Category("Mix")]
    public void TestMultiply_way3_mix(
        [Values(17, 244, 3900)] int operand1,
        [Range(-200, 650, 50)] int operand2)
    {
        //Action
        var actualResult = calculator.Multiply(operand1, operand2);
        var expectedResult = operand1 * operand2;

        //Assert
        Assert.AreEqual(actualResult, expectedResult, $"Multiply {operand1} * {operand2} = {actualResult}");
    }

    [TearDown]
    public void TearDown()
    {
        Console.WriteLine("Multiply - After each test");
    }

    [OneTimeTearDown]
    public void OneTimeTearDown()
    {
        Console.WriteLine("Multiply - In the end after all tests");
    }
}
